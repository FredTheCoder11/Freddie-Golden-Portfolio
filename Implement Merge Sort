//Freddie Golden
//Merge Sort

#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>

using namespace std;

int comparisons = 0;
int swaps = 0;

void merge(vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    vector<int> left_half(n1);
    vector<int> right_half(n2);

    for (int i = 0; i < n1; i++)
        left_half[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        right_half[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        comparisons++;
        if (left_half[i] <= right_half[j]) {
            arr[k] = left_half[i];
            i++;
        } else {
            arr[k] = right_half[j];
            j++;
        }
        swaps++;
        k++;
    }

    while (i < n1) {
        arr[k] = left_half[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = right_half[j];
        j++;
        k++;
    }
}

void merge_sort(vector<int>& arr, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        merge_sort(arr, left, mid);
        merge_sort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

int main() {
    srand(time(0));

    vector<int> arr_64(64);
    vector<int> arr_128(128);

    for (int i = 0; i < 64; ++i)
        arr_64[i] = rand() % 1000 + 1;

    for (int i = 0; i < 128; ++i)
        arr_128[i] = rand() % 1000 + 1;

    comparisons = 0;
    swaps = 0;
    merge_sort(arr_64, 0, arr_64.size() - 1);
    cout << "For 64 numbers:\n";
    cout << "Comparisons: " << comparisons << endl;
    cout << "Swaps: " << swaps << endl;
    cout << "Expected number of comparisons for NlogN: " << 64 * 6 << endl << endl;

    comparisons = 0;
    swaps = 0;
    merge_sort(arr_128, 0, arr_128.size() - 1);
    cout << "For 128 numbers:\n";
    cout << "Comparisons: " << comparisons << endl;
    cout << "Swaps: " << swaps << endl;
    cout << "Expected number of comparisons for NlogN: " << 128 * 7 << endl;

    return 0;
}
